# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      USE_APPROVALS: 
        description: Enable approvals?
        type: choice
        options:
          - 'true'
          - 'false'
      ENVIRONMENT:
        description: Environment 
        type: string

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  initialize:
    name: Initialize Workflow
    runs-on: ubuntu-latest
    steps:
      - run: echo "Initialize Workflow:${{inputs.ACCESS}}"
        shell: bash
        
  approval:
    name: Approve Workflow Deployment
    runs-on: ubuntu-latest
    if: ${{ inputs.USE_APPROVALS == 'true' }}
    environment: approval-environment
    steps:
      - name: Approve Workflow Deployment
        run: echo "Approved Workflow Deployment"
        shell: bash
        
  

  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: [approval]
    if: ${{ !failure() && !cancelled() }}
    outputs:
      DD_ENV: ${{steps.env-output.outputs.DD_ENV}}
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project. ${{needs.approval.result}}
      - name: Map env vars based on selections
        id: env-output
        env:
          ENVIRONMENT: ${{ inputs.ENVIRONMENT }}
        shell: bash
        run: |
          if [ "$ENVIRONMENT" == "prod" ]; then
            echo "new_relic_api_key=${{ secrets.NEWRELIC_API_KEY_PROD }}" >> "$GITHUB_ENV"
            echo "new_relic_account=1610606" >> "$GITHUB_ENV"
            echo "AWS_ACCOUNT_ID=805080102354" >> "$GITHUB_ENV"
            echo "accountAlias=awsdficmnsvc" >> "$GITHUB_ENV"
          elif [ "$ENVIRONMENT" == "lab" ]; then
            echo "new_relic_api_key=${{ secrets.NEWRELIC_API_KEY_NON_PROD }}" >> "$GITHUB_ENV"
            echo "new_relic_account=1610605" >> "$GITHUB_ENV"
            echo "AWS_ACCOUNT_ID=607694952559" >> "$GITHUB_ENV"
            echo "accountAlias=awscoxautolabs18" >> "$GITHUB_ENV"
            echo "DD_ENV=lab" >> "$GITHUB_ENV"
          else
            echo "new_relic_api_key=${{ secrets.NEWRELIC_API_KEY_NON_PROD }}" >> "$GITHUB_ENV"
            echo "new_relic_account=1610605" >> "$GITHUB_ENV"
            echo "AWS_ACCOUNT_ID=581378238327" >> "$GITHUB_ENV"
            echo "accountAlias=awsdficmnsvcnp" >> "$GITHUB_ENV"
          fi
          
          echo "DD_ENV=$ENVIRONMENT" >> "$GITHUB_ENV"
          if [ "$ENVIRONMENT" == "dvi1" ]; then
            echo "DD_ENV=devint" >> "$GITHUB_ENV"
          fi
          
  notify:
    name: Notify Workflow
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - run: echo "NOtify Workflow:${{needs.build.outputs.DD_ENV}}"
        shell: bash
  
